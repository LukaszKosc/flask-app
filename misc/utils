>>> r = Role(name='admin')
>>> r
<Role admin>
>>> r = Role(name='admin',user_id=1)
>>> r
<Role admin>
>>> print(dir(r))
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__mapper__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__table__', '__tablename__', '__weakref__', '_decl_class_registry', '_sa_class_manager', '_sa_instance_state', 'id', 'member', 'metadata', 'name', 'query', 'query_class', 'user_id']
>>> print(r.member)
None
>>> print(r.user_id)
1
>>> print(r.member)
None
>>> print(r.user.id)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Role' object has no attribute 'user'
>>> u = User.query.filter_by(username='lukasz').first()
>>> u
<User lukasz>
>>> u.posts
<sqlalchemy.orm.dynamic.AppenderBaseQuery object at 0x7f5fc17d68e0>
>>> u.roles
<sqlalchemy.orm.dynamic.AppenderBaseQuery object at 0x7f5fc0a6df40>
>>> r = Role(name='admin', member=u)
>>> r
<Role admin>
>>> print(r.member)
<User lukasz>
>>> db.session.add(r);
>>> db.session.commit()
>>> r = Role(name='user', member=u)
>>> r
<Role user>
>>> print(r.member)
<User lukasz>
>>> db.session.add(r);
>>> db.session.commit()
>>> u_r = Role.query.all()
>>> for u_role in u_r:
...     print(u_role)
...
<Role admin>
<Role user>
>>> u = User.query.all()
>>> u
[<User lukasz>]
>>> print(u.member)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'list' object has no attribute 'member'
>>> print(u.role)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'list' object has no attribute 'role'
>>> print(u.roles)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'list' object has no attribute 'roles'
>>> print(u)
[<User lukasz>]
>>> print(dir(u))
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> u_r = Role.query.all()
>>> print(dir(u_r))
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> print((u_r))
[<Role admin>, <Role user>]
>>> for i in u_r:
...     print(i.member)
...
<User lukasz>
<User lukasz>
>>> u = User(username='susan', email='t@a.pl')
>>> u
<User susan>
>>> r = Role(name='user', member=u)
>>> db.session.add(u)
>>> db.session.commit(u)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/lukasz/projects/flask-app/flskEnv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py", line 163, in do
    return getattr(self.registry(), name)(*args, **kwargs)
TypeError: commit() takes 1 positional argument but 2 were given
>>> db.session.commit()
>>> db.session.add(r)
>>> db.session.commit()
>>> for i in u_r:
... db.session.add(r)
KeyboardInterrupt
>>>
KeyboardInterrupt
>>> u_r = Role.query.all()
>>> for i in u_r:
...     print(i.member)
...
<User lukasz>
<User lukasz>
<User susan>
>>> u_r = Role.query.filter_by(name='user')
>>> u_r
<flask_sqlalchemy.BaseQuery object at 0x7f5fc0454bb0>
>>> for i in u_r:
...     print(i)
...
<Role user>
<Role user>
>>> for i in u_r:
...     print(i.member)
...
<User lukasz>
<User susan>
>>>

susan / cat
lukasz / kos
